{
    "docs": [
        {
            "location": "/",
            "text": "Home\n\u00b6\n\n\nWelcome on my personnal documentation\n\n\nConfiguration\n\u00b6\n\n\nInstall my configuration\n\n\nwget -O - https://ls.gitcommit.fr \n|\n sudo bash -s \n[\noption\n]\n \n$USER\n\n\n\n\n\nAvailable options:\n\n\n\n\nminimal (vim)\n\n\nshell (zsh)\n\n\nserver (modified prompt with red warning)\n\n\ndocker\n\n\nansible\n\n\nfull (minimal && shell)\n\n\n\n\nGo to Github project",
            "title": "Home"
        },
        {
            "location": "/#home",
            "text": "Welcome on my personnal documentation",
            "title": "Home"
        },
        {
            "location": "/#configuration",
            "text": "Install my configuration  wget -O - https://ls.gitcommit.fr  |  sudo bash -s  [ option ]   $USER   Available options:   minimal (vim)  shell (zsh)  server (modified prompt with red warning)  docker  ansible  full (minimal && shell)   Go to Github project",
            "title": "Configuration"
        },
        {
            "location": "/git/",
            "text": "Submodules\n\u00b6\n\n\nFetching new repository.\n\n\ngit submodule update --init\n\n\ngit pull --recurse-submodules",
            "title": "Git"
        },
        {
            "location": "/git/#submodules",
            "text": "Fetching new repository.  git submodule update --init  git pull --recurse-submodules",
            "title": "Submodules"
        },
        {
            "location": "/vim/",
            "text": "Very good documentation \u2192 \nvim tips and tricks: registers\n\n\nClipboard\n\u00b6\n\n\n\n\n\"\\*\n choose the clipboard register\n\n\n\"\\*y\n copy lines to clipboard register\n\n\n\n\nRegisters\n\u00b6\n\n\n*Very handy what you want to get back what you've \ndeleted*\n\n\n\n\n:reg\n to see all of them\n\n\n\"3p\n to paste content to 3\nrd\n register\n\n\n\n\nBuffers\n\u00b6\n\n\n\n\n:ls\n will show your open buffers\n\n\n:b\n \n will open the specified buffer in the current pane.\n\n\n\n\nEditing a stream\n\u00b6\n\n\n:! find . | vim -\n  in a shell get content and send it to vim then \n:w filename\n to save the file\n\n\nGit (Vim Fugitive)\n\u00b6\n\n\n\n\nGdiff\n view diff\n\n\nGstatus\n view status:\n\n\n-\n add/reset file\n\n\nEnter\n view the file current window\n\n\nC\n invoke \n:Gcommit\n \n\n\nC-p\n and \nC-n\n to move between file\n\n\nGwrite\n to stage current file\n\n\nGBrowser\n to view on Github\n\n\nGlog\n display all commit for current file\n\n\n\\[q\n previous\n\n\n\\]q\n next\n\n\nDo not forget \n:cw\n for quick view\n\n\nGlog --\n display all commits\n\n\nGgrep finds\n \n\n\n\n\nRegex\n\u00b6\n\n\nRegex cheatsheet",
            "title": "Vim"
        },
        {
            "location": "/vim/#clipboard",
            "text": "\"\\*  choose the clipboard register  \"\\*y  copy lines to clipboard register",
            "title": "Clipboard"
        },
        {
            "location": "/vim/#registers",
            "text": "*Very handy what you want to get back what you've  deleted*   :reg  to see all of them  \"3p  to paste content to 3 rd  register",
            "title": "Registers"
        },
        {
            "location": "/vim/#buffers",
            "text": ":ls  will show your open buffers  :b    will open the specified buffer in the current pane.",
            "title": "Buffers"
        },
        {
            "location": "/vim/#editing-a-stream",
            "text": ":! find . | vim -   in a shell get content and send it to vim then  :w filename  to save the file",
            "title": "Editing a stream"
        },
        {
            "location": "/vim/#git-vim-fugitive",
            "text": "Gdiff  view diff  Gstatus  view status:  -  add/reset file  Enter  view the file current window  C  invoke  :Gcommit    C-p  and  C-n  to move between file  Gwrite  to stage current file  GBrowser  to view on Github  Glog  display all commit for current file  \\[q  previous  \\]q  next  Do not forget  :cw  for quick view  Glog --  display all commits  Ggrep finds",
            "title": "Git (Vim Fugitive)"
        },
        {
            "location": "/vim/#regex",
            "text": "Regex cheatsheet",
            "title": "Regex"
        },
        {
            "location": "/devops/docker/",
            "text": "Git tags\n\u00b6\n\n\nTo get the current git commit SHA use \ngit rev-parse HEAD\n.\n\n\nYou can also use the shorter version with \necho $(git log -1 --pretty=%h)\n.",
            "title": "Docker"
        },
        {
            "location": "/devops/docker/#git-tags",
            "text": "To get the current git commit SHA use  git rev-parse HEAD .  You can also use the shorter version with  echo $(git log -1 --pretty=%h) .",
            "title": "Git tags"
        },
        {
            "location": "/devops/vagrant/",
            "text": "Useful links\n\u00b6\n\n\nVagrant boxes\n\n\nVagrant scp to copy files\n\n\nDemo Vagrantfile\n\u00b6\n\n\nVagrant\n.\nconfigure\n(\n\"2\"\n)\n \ndo\n \n|\nconfig\n|\n\n  \nconfig\n.\nvm\n.\nbox\n \n=\n \n\"consumerlab/ubuntu-server-16-04-LTS\"\n\n  \nconfig\n.\nvm\n.\ndefine\n \n\"database_machine\"\n\n  \nconfig\n.\nvm\n.\nnetwork\n \n\"forwarded_port\"\n,\n \nguest\n:\n \n80\n,\n \nhost\n:\n \n80\n\n\n  \nconfig\n.\nvm\n.\nprovision\n \n\"ansible\"\n \ndo\n \n|\nansible\n|\n\n    \nansible\n.\nplaybook\n \n=\n \n\"site.yml\"\n\n    \nansible\n.\ngroups\n \n=\n \n{\n\n      \n\"database\"\n \n=>\n \n[\n\"database_machine\"\n]\n\n    \n}\n\n    \nansible\n.\nextra_vars\n \n=\n \n{\n\n      \n\"some_var\"\n:\n \n\"content\"\n\n    \n}\n\n    \nansible\n.\nraw_arguments\n \n=\n \n[\n\"--ask-become-pass\"\n]\n\n  \nend\n\n\nend",
            "title": "Vagrant"
        },
        {
            "location": "/devops/vagrant/#useful-links",
            "text": "Vagrant boxes  Vagrant scp to copy files",
            "title": "Useful links"
        },
        {
            "location": "/devops/vagrant/#demo-vagrantfile",
            "text": "Vagrant . configure ( \"2\" )   do   | config | \n   config . vm . box   =   \"consumerlab/ubuntu-server-16-04-LTS\" \n   config . vm . define   \"database_machine\" \n   config . vm . network   \"forwarded_port\" ,   guest :   80 ,   host :   80 \n\n   config . vm . provision   \"ansible\"   do   | ansible | \n     ansible . playbook   =   \"site.yml\" \n     ansible . groups   =   { \n       \"database\"   =>   [ \"database_machine\" ] \n     } \n     ansible . extra_vars   =   { \n       \"some_var\" :   \"content\" \n     } \n     ansible . raw_arguments   =   [ \"--ask-become-pass\" ] \n   end  end",
            "title": "Demo Vagrantfile"
        },
        {
            "location": "/devops/volumes/",
            "text": "Volumes status\n\u00b6\n\n\nlsblk -f\n, \nfindmnt\n or \ndf -h\n.\n\n\nMount volume\n\u00b6\n\n\nDetermine whether to create a file system on the volume.\n\n\n$ sudo file -s /dev/xvdf\n/dev/xvdf: data\n\n\n\n\nIf the output of the command shows simply data for the device, then\nthere is no file system on the device and you must create one.\n\n\nCreate new filesystem\n\n\nsudo mkfs -t ext4 device_name\n\n\nFinal mount step\n\n\nsudo mkdir mount_point\nsudo mount device_name mount_point\n\n\n\n\nThen edit \n/etc/fstab\n\n\n# device_name  mount_point  file_system_type  fs_mntops  fs_freq  fs_passno\n\n/dev/xvdf       /data   ext4    defaults,nofail        \n0\n       \n2\n\n\n\n\n\nYou can check is the fstab is valid using \nsudo mount -a\n.\n\n\nExtend volume\n\u00b6\n\n\n$ sudo growpart /dev/xvdf \n1\n\nCHANGED: \ndisk\n=\n/dev/xvdf \npartition\n=\n1\n: \nstart\n=\n4096\n old: \nsize\n=\n16773086\n,end\n=\n16777182\n new: \nsize\n=\n73396190\n,end\n=\n73400286\n\n\n$ sudo resize2fs /dev/xvdf1",
            "title": "Volumes"
        },
        {
            "location": "/devops/volumes/#volumes-status",
            "text": "lsblk -f ,  findmnt  or  df -h .",
            "title": "Volumes status"
        },
        {
            "location": "/devops/volumes/#mount-volume",
            "text": "Determine whether to create a file system on the volume.  $ sudo file -s /dev/xvdf\n/dev/xvdf: data  If the output of the command shows simply data for the device, then\nthere is no file system on the device and you must create one.  Create new filesystem  sudo mkfs -t ext4 device_name \nFinal mount step  sudo mkdir mount_point\nsudo mount device_name mount_point  Then edit  /etc/fstab  # device_name  mount_point  file_system_type  fs_mntops  fs_freq  fs_passno \n/dev/xvdf       /data   ext4    defaults,nofail         0         2   You can check is the fstab is valid using  sudo mount -a .",
            "title": "Mount volume"
        },
        {
            "location": "/devops/volumes/#extend-volume",
            "text": "$ sudo growpart /dev/xvdf  1 \nCHANGED:  disk = /dev/xvdf  partition = 1 :  start = 4096  old:  size = 16773086 ,end = 16777182  new:  size = 73396190 ,end = 73400286 \n\n$ sudo resize2fs /dev/xvdf1",
            "title": "Extend volume"
        },
        {
            "location": "/server/databases/",
            "text": "PostgreSQL\n\u00b6\n\n\nShell\n\u00b6\n\n\nCheck full \nquick cheat\n\n\n\n\n\\l\n list tables\n\n\n\\connect database\n\n\n\\dt\n list tables\n\n\n\n\nsudo -i -u postgres\n\n\nCreate dump\n\u00b6\n\n\npg_dump dbname > outfile\npg_dumpall > outfile\npg_dump dbname \n|\n gzip > filename.gz \n# Large database\n\n\n\n\n\nRestore dump\n\u00b6\n\n\npsql dbname < infile\ngunzip -c filename.gz \n|\n psql dbname \n# Large database\n\n\n\n\n\nElasticSearch\n\u00b6\n\n\nGet number of primary shards on each nodes\n\n\ncurl -s elasticsearch:9200/_cat/shards?h\n=\nnode,prirep \n|\n awk \n'\n\n\n$2 == \"p\" {\n\n\n  result[$1] += 1; total += 1\n\n\n}\n\n\nEND {\n\n\n  for (var in result)\n\n\n    printf \"%s\\t%s (%0.2f%%)\\n\",var,result[var],result[var]/total*100\n\n\n}'",
            "title": "Databases"
        },
        {
            "location": "/server/databases/#postgresql",
            "text": "",
            "title": "PostgreSQL"
        },
        {
            "location": "/server/databases/#shell",
            "text": "Check full  quick cheat   \\l  list tables  \\connect database  \\dt  list tables   sudo -i -u postgres",
            "title": "Shell"
        },
        {
            "location": "/server/databases/#create-dump",
            "text": "pg_dump dbname > outfile\npg_dumpall > outfile\npg_dump dbname  |  gzip > filename.gz  # Large database",
            "title": "Create dump"
        },
        {
            "location": "/server/databases/#restore-dump",
            "text": "psql dbname < infile\ngunzip -c filename.gz  |  psql dbname  # Large database",
            "title": "Restore dump"
        },
        {
            "location": "/server/databases/#elasticsearch",
            "text": "Get number of primary shards on each nodes  curl -s elasticsearch:9200/_cat/shards?h = node,prirep  |  awk  '  $2 == \"p\" {    result[$1] += 1; total += 1  }  END {    for (var in result)      printf \"%s\\t%s (%0.2f%%)\\n\",var,result[var],result[var]/total*100  }'",
            "title": "ElasticSearch"
        },
        {
            "location": "/server/network/",
            "text": "Interfaces\n\u00b6\n\n\nHow to restart ?\n\n\nFirst \ncheck\n the file syntax using \nsudo ifup --no-act br0\n.\n\n\nThen safely restart with \nsudo ifdown br0 && sudo ifup br0",
            "title": "Network"
        },
        {
            "location": "/server/network/#interfaces",
            "text": "How to restart ?  First  check  the file syntax using  sudo ifup --no-act br0 .  Then safely restart with  sudo ifdown br0 && sudo ifup br0",
            "title": "Interfaces"
        },
        {
            "location": "/server/services/",
            "text": "General\n\u00b6\n\n\nupdate-rc.d serviceName \nenable\n\n\n\n\n\nservice --status-all\n\n\n\n\nFind the path\n\n\nsystemctl show -p FragmentPath pure-ftpd.service\n\n\n\n\nList services (enabled, static, masked)\n\n\nsystemctl list-unit-files\n\n\n\n\nService checks\n\u00b6\n\n\n\n\ndns \ndnsmasq --test\n\n\nhaproxy \nhaproxy -c -V -f /etc/haproxy/haproxy.cfg\n\n\nlorotate \nsudo logrotate -d /etc/logrotate.d/myfile",
            "title": "Services"
        },
        {
            "location": "/server/services/#general",
            "text": "update-rc.d serviceName  enable   service --status-all  Find the path  systemctl show -p FragmentPath pure-ftpd.service  List services (enabled, static, masked)  systemctl list-unit-files",
            "title": "General"
        },
        {
            "location": "/server/services/#service-checks",
            "text": "dns  dnsmasq --test  haproxy  haproxy -c -V -f /etc/haproxy/haproxy.cfg  lorotate  sudo logrotate -d /etc/logrotate.d/myfile",
            "title": "Service checks"
        },
        {
            "location": "/server/ssh/",
            "text": "Proxy\n\u00b6\n\n\nSet up an \nssh bastion proxy\n\n\nTunnel\n\u00b6\n\n\nssh -L \n3899\n:localhost:389 vboissiere@server\n\n\n\n\nVagrant tunnel\n\n\nvg ssh -- -R \n3899\n:localhost:3899",
            "title": "Ssh"
        },
        {
            "location": "/server/ssh/#proxy",
            "text": "Set up an  ssh bastion proxy",
            "title": "Proxy"
        },
        {
            "location": "/server/ssh/#tunnel",
            "text": "ssh -L  3899 :localhost:389 vboissiere@server  Vagrant tunnel  vg ssh -- -R  3899 :localhost:3899",
            "title": "Tunnel"
        },
        {
            "location": "/server/users/",
            "text": "Add user to sudo group\n\u00b6\n\n\nsudo usermod -aG sudo username",
            "title": "Users"
        },
        {
            "location": "/server/users/#add-user-to-sudo-group",
            "text": "sudo usermod -aG sudo username",
            "title": "Add user to sudo group"
        }
    ]
}